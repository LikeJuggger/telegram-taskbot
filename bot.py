from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import time
import os

# –°—Ç–∞–¥—ñ—ó
NAME, DESCRIPTION, LINKS, ASSIGNEE, DEADLINE = range(5)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[DEBUG] Chat ID: {update.effective_chat.id}")
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /newtask —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É.")

# –ü–æ—á–∞—Ç–æ–∫
async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['messages'] = [update.message.message_id]
    await update.message.reply_text("üìå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ?")
    return NAME

# –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö + –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    context.user_data['messages'].append(update.message.message_id)
    await update.message.reply_text("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á—ñ:")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    context.user_data['messages'].append(update.message.message_id)
    await update.message.reply_text("üìé –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ–º–∞—î¬ª")
    return LINKS

async def get_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['links'] = update.message.text
    context.user_data['messages'].append(update.message.message_id)
    await update.message.reply_text("üë§ –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å? –í–∫–∞–∂–∏ @username:")
    return ASSIGNEE

async def get_assignee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['assignee'] = update.message.text
    context.user_data['messages'].append(update.message.message_id)
    await update.message.reply_text("‚è∞ –Ø–∫–∏–π –¥–µ–¥–ª–∞–π–Ω?")
    return DEADLINE

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def get_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['deadline'] = update.message.text
    context.user_data['messages'].append(update.message.message_id)

    data = context.user_data
    summary = (
        f"‚úÖ *–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞!*\n\n"
        f"*–ù–∞–∑–≤–∞:* {data['name']}\n"
        f"*–û–ø–∏—Å:* {data['description']}\n"
        f"*–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏:* {data['links']}\n"
        f"*–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:* {data['assignee']}\n"
        f"*–î–µ–¥–ª–∞–π–Ω:* {data['deadline']}"
    )

    topic_title = f"üî¥ {data['name']} ‚Äì {data['assignee']}"
    topic = await context.bot.create_forum_topic(
        chat_id=update.effective_chat.id,
        name=topic_title
    )

    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        message_thread_id=topic.message_thread_id,
        text=summary,
        parse_mode="Markdown"
    )

    await context.bot.pin_chat_message(
        chat_id=update.effective_chat.id,
        message_id=msg.message_id
    )

    # –û—á–∏—Å—Ç–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    for msg_id in data.get("messages", []):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
        except:
            pass

    context.user_data.clear()
    context.conversation_data.clear()
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ó–∞–¥–∞—á—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# üïí –§—É–Ω–∫—Ü—ñ—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
async def send_reminders(bot):
    chat_id = -1001234567890  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ ID —Ç–≤–æ—î—ó –≥—Ä—É–ø–∏
    try:
        topics = await bot.get_forum_topic_list(chat_id=chat_id)
        for topic in topics:
            if "üî¥" in topic.name:
                await bot.send_message(
                    chat_id=chat_id,
                    message_thread_id=topic.message_thread_id,
                    text="üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–¥–∞—á–∞ —â–µ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞!"
                )
    except Exception as e:
        print(f"[Reminder Error] {e}")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, trigger='cron', hour=23, minute=20, args=[app.bot])
    scheduler.start()

    # –•–µ–Ω–¥–ª–µ—Ä–∏
    conv = ConversationHandler(
        entry_points=[CommandHandler("newtask", new_task)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_links)],
            ASSIGNEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_assignee)],
            DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deadline)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=False
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
