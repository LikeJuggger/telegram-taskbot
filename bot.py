import os, json, asyncio, uuid, re
from datetime import datetime, date, time as dtime, timedelta
from zoneinfo import ZoneInfo
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TZ = ZoneInfo("Europe/Kyiv")
THREAD_FILE = "threads.json"
REMIND_FILE = "reminders.json"

NAME, DESCRIPTION, LINKS, ASSIGNEE, DEADLINE = range(5)
RTARGET, RSELECT_THREAD, RTITLE, RTEXT, RTYPE, RSTART, REND, RTIME = range(10, 18)

MAIN_KB = ReplyKeyboardMarkup(
    [[KeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É"), KeyboardButton("‚è∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")],
     [KeyboardButton("‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É"), KeyboardButton("üõë –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")]],
    resize_keyboard=True
)

def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            try: return json.load(f)
            except: return []
    return []

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def list_open_threads():
    return load_json(THREAD_FILE)

def upsert_thread(rec):
    data = load_json(THREAD_FILE)
    data.append(rec)
    save_json(THREAD_FILE, data)

def remove_thread(chat_id, thread_id):
    data = load_json(THREAD_FILE)
    data = [t for t in data if not (t["chat_id"] == chat_id and t["id"] == thread_id)]
    save_json(THREAD_FILE, data)

def find_thread(chat_id, thread_id):
    for t in load_json(THREAD_FILE):
        if t["chat_id"] == chat_id and t["id"] == thread_id:
            return t
    return None

def upsert_reminder(rem):
    data = load_json(REMIND_FILE)
    data = [r for r in data if r.get("id") != rem["id"]]
    data.append(rem)
    save_json(REMIND_FILE, data)

def get_reminders(active_only=True):
    data = load_json(REMIND_FILE)
    if active_only:
        data = [r for r in data if r.get("active", True)]
    return data

def deactivate_reminder_by_title(title):
    data = load_json(REMIND_FILE)
    changed = False
    for r in data:
        if r.get("title") == title and r.get("active", True):
            r["active"] = False
            r["job_ids"] = []
            changed = True
    if changed: save_json(REMIND_FILE, data)
    return changed

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=MAIN_KB)

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["step"] = NAME
    await update.message.reply_text("üìå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ?", reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True))
    return NAME

async def back_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")
    if step == DESCRIPTION:
        await update.message.reply_text("üìå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ?")
        context.user_data["step"] = NAME
        return NAME
    elif step == LINKS:
        await update.message.reply_text("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á—ñ:")
        context.user_data["step"] = DESCRIPTION
        return DESCRIPTION
    elif step == ASSIGNEE:
        await update.message.reply_text("üìå –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ–º–∞—î¬ª")
        context.user_data["step"] = LINKS
        return LINKS
    elif step == DEADLINE:
        await update.message.reply_text("üë§ –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å? –í–∫–∞–∂–∏ @username:")
        context.user_data["step"] = ASSIGNEE
        return ASSIGNEE
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await back_step(update, context)
    context.user_data["name"] = update.message.text
    context.user_data["step"] = DESCRIPTION
    await update.message.reply_text("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á—ñ:")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await back_step(update, context)
    context.user_data["description"] = update.message.text
    context.user_data["step"] = LINKS
    await update.message.reply_text("üìå –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ–º–∞—î¬ª")
    return LINKS

async def get_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await back_step(update, context)
    context.user_data["links"] = update.message.text
    context.user_data["step"] = ASSIGNEE
    await update.message.reply_text("üë§ –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å? –í–∫–∞–∂–∏ @username:")
    return ASSIGNEE

async def get_assignee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await back_step(update, context)
    context.user_data["assignee"] = update.message.text
    context.user_data["step"] = DEADLINE
    await update.message.reply_text("‚è∞ –Ø–∫–∏–π –¥–µ–¥–ª–∞–π–Ω? (YYYY-MM-DD –∞–±–æ ¬´–Ω–µ–º–∞—î¬ª)")
    return DEADLINE

async def get_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": return await back_step(update, context)
    context.user_data["deadline"] = update.message.text
    data = context.user_data
    base_name = f"{data['name']} ‚Äì {data['assignee']}"
    topic = await context.bot.create_forum_topic(chat_id=update.effective_chat.id, name=f"üî¥ {base_name}")
    upsert_thread({"id": topic.message_thread_id, "chat_id": update.effective_chat.id, "base_name": base_name})
    summary = (f"<b>–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞!</b>\n\n"
               f"<b>–ù–∞–∑–≤–∞:</b> {data['name']}\n"
               f"<b>–û–ø–∏—Å:</b> {data['description']}\n"
               f"<b>–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏:</b> {data['links']}\n"
               f"<b>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:</b> {data['assignee']}\n"
               f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {data['deadline']}")
    msg = await context.bot.send_message(chat_id=update.effective_chat.id, message_thread_id=topic.message_thread_id, text=summary, parse_mode="HTML")
    await context.bot.pin_chat_message(chat_id=update.effective_chat.id, message_id=msg.message_id)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=MAIN_KB)
    return ConversationHandler.END

async def close_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.message.message_thread_id
    chat_id = update.effective_chat.id
    if thread_id is None:
        await update.message.reply_text("‚ùå –¶–µ –Ω–µ —Ç–µ–º–∞ –∑–∞–¥–∞—á—ñ.", reply_markup=MAIN_KB); return
    rec = find_thread(chat_id, thread_id)
    if not rec:
        await update.message.reply_text("‚ùå –¶—è —Ç–µ–º–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ —è–∫ –∑–∞–¥–∞—á–∞.", reply_markup=MAIN_KB); return
    new_name = f"üü¢ {rec['base_name']}"
    await context.bot.edit_forum_topic(chat_id=chat_id, message_thread_id=thread_id, name=new_name)
    remove_thread(chat_id, thread_id)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á—É –∑–∞–∫—Ä–∏—Ç–æ.", reply_markup=MAIN_KB)

async def rem_start_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    kb = ReplyKeyboardMarkup([["–î–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á"], ["–£ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≥—ñ–ª–∫—É"], ["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
    await update.message.reply_text("–ö—É–¥–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?", reply_markup=kb)
    return RTARGET

async def rem_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text
    if txt == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return ConversationHandler.END
    if txt == "–î–ª—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∑–∞–¥–∞—á":
        context.user_data["target"] = {"mode":"all_open"}
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True))
        return RTITLE
    context.user_data["target"] = {"mode":"specific"}
    threads = list_open_threads()
    rows = [[f"{t['base_name']} (id:{t['id']})"] for t in threads] + [["General (id:general)"], ["–°–∫–∞—Å—É–≤–∞—Ç–∏"]]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≥—ñ–ª–∫—É:", reply_markup=ReplyKeyboardMarkup(rows, resize_keyboard=True))
    return RSELECT_THREAD

async def rem_select_thread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text
    if txt == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return ConversationHandler.END
    m = re.search(r"id:(\d+|general)", txt)
    if not m:
        await update.message.reply_text("–ù–µ –∑–º—ñ–≥ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ id. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ id:12345.")
        return RSELECT_THREAD
    tid = m.group(1)
    thread_id = None if tid == "general" else int(tid)
    context.user_data["target"]["thread_id"] = thread_id
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True))
    return RTITLE

async def rem_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return ConversationHandler.END
    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:")
    return RTEXT

async def rem_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["text"] = update.message.text
    kb = ReplyKeyboardMarkup([["–û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ"], ["–©–æ–¥–µ–Ω–Ω–µ –∑ –¥–∞—Ç–∞–º–∏"], ["–©–æ–¥–µ–Ω–Ω–µ –±–µ–∑ –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏"], ["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:", reply_markup=kb)
    return RTYPE

async def rem_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return ConversationHandler.END
    context.user_data["rtype"] = t
    if t == "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ":
        await update.message.reply_text("–ß–∞—Å: HH:MM —Å—å–æ–≥–æ–¥–Ω—ñ –∞–±–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ +N (—Ö–≤–∏–ª–∏–Ω).", reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True))
        return RTIME
    if t == "–©–æ–¥–µ–Ω–Ω–µ –∑ –¥–∞—Ç–∞–º–∏":
        await update.message.reply_text("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É (YYYY-MM-DD):", reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True))
        return RSTART
    if t == "–©–æ–¥–µ–Ω–Ω–µ –±–µ–∑ –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏":
        await update.message.reply_text("–ß–∞—Å (HH:MM):", reply_markup=ReplyKeyboardMarkup([["–°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True))
        return RTIME

async def rem_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["start_date"] = update.message.text.strip()
    await update.message.reply_text("–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (YYYY-MM-DD):")
    return REND

async def rem_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["end_date"] = update.message.text.strip()
    await update.message.reply_text("–ß–∞—Å (HH:MM):")
    return RTIME

async def send_text(bot, chat_id, thread_id, text):
    if thread_id is None:
        await bot.send_message(chat_id=chat_id, text=text)
    else:
        await bot.send_message(chat_id=chat_id, message_thread_id=thread_id, text=text)

async def reminder_job(application, rem):
    if not rem.get("active", True): return
    bot = application.bot
    if rem.get("for_all_open"):
        for t in list_open_threads():
            try: await send_text(bot, t["chat_id"], t["id"], rem["text"])
            except: pass
    else:
        try: await send_text(bot, rem["chat_id"], rem.get("thread_id"), rem["text"])
        except: pass

def schedule_reminder(scheduler, application, rem):
    job_ids = []
    rtype = rem["rtype"]
    if rtype == "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ":
        spec = rem["time_spec"]
        when = None
        if spec.startswith("+"):
            mins = int(spec[1:].strip())
            when = datetime.now(TZ) + timedelta(minutes=mins)
        else:
            hh, mm = map(int, spec.split(":"))
            now = datetime.now(TZ)
            when = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
            if when < now: when += timedelta(days=1)
        j = scheduler.add_job(lambda: asyncio.create_task(reminder_job(application, rem)), "date", run_date=when)
        job_ids.append(j.id)
    elif rtype == "–©–æ–¥–µ–Ω–Ω–µ –∑ –¥–∞—Ç–∞–º–∏":
        hh, mm = map(int, rem["time"].split(":"))
        async def daily_window():
            today = datetime.now(TZ).date()
            sd = datetime.strptime(rem["start_date"], "%Y-%m-%d").date()
            ed = datetime.strptime(rem["end_date"], "%Y-%m-%d").date()
            if sd <= today <= ed:
                await reminder_job(application, rem)
        j = scheduler.add_job(lambda: asyncio.create_task(daily_window()), "cron", hour=hh, minute=mm)
        job_ids.append(j.id)
    elif rtype == "–©–æ–¥–µ–Ω–Ω–µ –±–µ–∑ –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏":
        hh, mm = map(int, rem["time"].split(":"))
        j = scheduler.add_job(lambda: asyncio.create_task(reminder_job(application, rem)), "cron", hour=hh, minute=mm)
        job_ids.append(j.id)
    rem["job_ids"] = job_ids
    upsert_reminder(rem)

def schedule_all(scheduler, application):
    for rem in get_reminders(active_only=True):
        schedule_reminder(scheduler, application, rem)

async def rem_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return ConversationHandler.END
    rtype = context.user_data["rtype"]
    rem = {
        "id": "rem_" + uuid.uuid4().hex[:10],
        "title": context.user_data["title"],
        "text": context.user_data["text"],
        "rtype": rtype,
        "active": True
    }
    target = context.user_data["target"]
    if target["mode"] == "all_open":
        rem["for_all_open"] = True
        rem["chat_id"] = update.effective_chat.id
        rem["thread_id"] = None
    else:
        rem["for_all_open"] = False
        rem["chat_id"] = update.effective_chat.id
        rem["thread_id"] = target.get("thread_id")
    if rtype == "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–µ":
        rem["time_spec"] = txt
    elif rtype == "–©–æ–¥–µ–Ω–Ω–µ –∑ –¥–∞—Ç–∞–º–∏":
        rem["start_date"] = context.user_data["start_date"]
        rem["end_date"] = context.user_data["end_date"]
        rem["time"] = txt
    elif rtype == "–©–æ–¥–µ–Ω–Ω–µ –±–µ–∑ –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏":
        rem["time"] = txt
    upsert_reminder(rem)
    schedule_reminder(scheduler, application, rem)  # uses globals below
    await update.message.reply_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ.", reply_markup=MAIN_KB)
    return ConversationHandler.END

async def disable_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rems = get_reminders(active_only=True)
    if not rems:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ–º–∞—î.", reply_markup=MAIN_KB); return
    rows = [[r["title"]] for r in rems] + [["–°–∫–∞—Å—É–≤–∞—Ç–∏"]]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(rows, resize_keyboard=True))

async def remove_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text
    if title == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB); return
    rems = get_reminders(active_only=True)
    found = [r for r in rems if r["title"] == title]
    if not found:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–µ –∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", reply_markup=MAIN_KB); return
    ok = deactivate_reminder_by_title(title)
    if ok:
        for r in found:
            for jid in r.get("job_ids", []):
                try: scheduler.remove_job(jid)
                except: pass
        await update.message.reply_text(f"üõë ¬´{title}¬ª –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
    else:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–º–∫–Ω—É—Ç–∏.", reply_markup=MAIN_KB)

application = None
scheduler = AsyncIOScheduler(timezone=TZ)

TOKEN = os.getenv("BOT_TOKEN")
application = ApplicationBuilder().token(TOKEN).build()

conv_task = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É$"), new_task)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
        LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_links)],
        ASSIGNEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_assignee)],
        DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deadline)],
    },
    fallbacks=[],
)

conv_rem = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚è∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è$"), rem_start_flow)],
    states={
        RTARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_target)],
        RSELECT_THREAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_select_thread)],
        RTITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_title)],
        RTEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_text)],
        RTYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_type)],
        RSTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_start_date)],
        REND: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_end_date)],
        RTIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, rem_time)],
    },
    fallbacks=[],
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_task)
application.add_handler(conv_rem)
application.add_handler(MessageHandler(filters.Regex("^‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É$"), close_task))
application.add_handler(MessageHandler(filters.Regex("^üõë –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è$"), disable_reminders))
application.add_handler(MessageHandler(filters.Regex("^üõë "), remove_reminder))
application.add_handler(MessageHandler(filters.Regex("^[^/].*"), lambda u, c: u.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ /start", reply_markup=MAIN_KB)))

schedule_all(scheduler, application)
scheduler.start()

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()
