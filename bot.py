import os
import json
import asyncio
import nest_asyncio
from datetime import time
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –©–æ–±–∏ –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–∂–µ –ø—Ä–∞—Ü—é—é—á–æ–≥–æ –ª—É–ø–∞ (Railway / Docker)
nest_asyncio.apply()

# –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç–µ–º
THREAD_FILE = "threads.json"

# –°—Ç–∞–¥—ñ—ó –¥–ª—è ConversationHandler
NAME, DESCRIPTION, LINKS, ASSIGNEE, DEADLINE = range(5)
DONE_LINK = range(1)


# ----------------------------------------
# üîß –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è / –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ID —Ç–µ–º
# ----------------------------------------
def load_threads():
    if os.path.exists(THREAD_FILE):
        with open(THREAD_FILE, "r") as f:
            return json.load(f)
    return []


def save_threads(data):
    with open(THREAD_FILE, "w") as f:
        json.dump(data, f)


# ----------------------------------------
# ü§ñ –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
# ----------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /newtask —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É."
    )


# /newtask ‚Üí –ø–æ—á–∞—Ç–æ–∫ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["messages"] = [update.message.message_id]
    await update.message.reply_text("üìå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ?")
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    context.user_data["messages"].append(update.message.message_id)
    await update.message.reply_text("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á—ñ:")
    return DESCRIPTION


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    context.user_data["messages"].append(update.message.message_id)
    await update.message.reply_text("üìé –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ–º–∞—î¬ª")
    return LINKS


async def get_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["links"] = update.message.text
    context.user_data["messages"].append(update.message.message_id)
    await update.message.reply_text("üë§ –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å? –í–∫–∞–∂–∏ @username:")
    return ASSIGNEE


async def get_assignee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["assignee"] = update.message.text
    context.user_data["messages"].append(update.message.message_id)
    await update.message.reply_text("‚è∞ –Ø–∫–∏–π –¥–µ–¥–ª–∞–π–Ω?")
    return DEADLINE


# –ü—ñ—Å–ª—è DEADLINE ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º—É, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ID, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–∞–º–∞—Ä—ñ, –ø—ñ–Ω–µ–º–æ, –æ—á–∏—â—É—î–º–æ
async def get_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["deadline"] = update.message.text
    context.user_data["messages"].append(update.message.message_id)
    data = context.user_data

    summary = (
        f"‚úÖ *–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞!*\n\n"
        f"*–ù–∞–∑–≤–∞:* {data['name']}\n"
        f"*–û–ø–∏—Å:* {data['description']}\n"
        f"*–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏:* {data['links']}\n"
        f"*–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:* {data['assignee']}\n"
        f"*–î–µ–¥–ª–∞–π–Ω:* {data['deadline']}"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ–ª–∫—É –∑ —á–µ—Ä–≤–æ–Ω–∏–º –∫—Ä—É–∂–µ—á–∫–æ–º
    topic = await context.bot.create_forum_topic(
        chat_id=update.effective_chat.id,
        name=f"üî¥ {data['name']} ‚Äì {data['assignee']}"
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É ID –≥—ñ–ª–∫–∏
    threads = load_threads()
    threads.append(topic.message_thread_id)
    save_threads(threads)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–∞–º–∞—Ä—ñ –≤ —Ç—É –≥—ñ–ª–∫—É
    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        message_thread_id=topic.message_thread_id,
        text=summary,
        parse_mode="Markdown"
    )

    # –ó–∞–∫—Ä—ñ–ø–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await context.bot.pin_chat_message(
        chat_id=update.effective_chat.id,
        message_id=msg.message_id
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –±–æ—Ç–∞
    for msg_id in data.get("messages", []):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=msg_id
            )
        except:
            pass

    context.user_data.clear()
    return ConversationHandler.END


# /cancel ‚Äî –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ó–∞–¥–∞—á—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END


# ----------------------------------------
# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ (/done)
# ----------------------------------------
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîó –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    return DONE_LINK


async def done_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result_link = update.message.text
    thread_id = update.message.message_thread_id
    chat_id = update.effective_chat.id

    # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ç–µ–º—É –∑ üî¥ ‚Üí üü¢
    try:
        topic = await context.bot.get_forum_topic(
            chat_id=chat_id,
            message_thread_id=thread_id
        )
        new_name = topic.name.replace("üî¥", "üü¢", 1)
        await context.bot.edit_forum_topic(
            chat_id=chat_id,
            message_thread_id=thread_id,
            name=new_name
        )
    except Exception as e:
        print(f"[Edit Error] {e}")

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑ —Ñ–∞–π–ª—É –∑–∞–∫—Ä–∏—Ç–∏—Ö
    try:
        threads = load_threads()
        threads = [tid for tid in threads if tid != thread_id]
        save_threads(threads)
    except Exception as e:
        print(f"[Remove Error] {e}")

    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {result_link}"
    )
    return ConversationHandler.END


# ----------------------------------------
# üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–µ–∑–∞–∫—Ä–∏—Ç—ñ
# ----------------------------------------
async def send_reminders(bot):
    # ID –≥—Ä—É–ø–∏ (–∑–∞–º—ñ–Ω—ñ –Ω–∞ —Å–≤—ñ–π!)
    chat_id = -1001234567890
    threads = load_threads()

    for thread_id in threads:
        try:
            await bot.send_message(
                chat_id=chat_id,
                message_thread_id=thread_id,
                text="üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞–¥–∞—á–∞ —â–µ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞!"
            )
        except Exception as e:
            print(f"[Reminder Error] {e}")


# ----------------------------------------
# üîÅ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# ----------------------------------------
async def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("newtask", new_task),
            CommandHandler("done", done),
        ],
        states={
            NAME:       [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            DESCRIPTION:[MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            LINKS:      [MessageHandler(filters.TEXT & ~filters.COMMAND, get_links)],
            ASSIGNEE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, get_assignee)],
            DEADLINE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deadline)],
            DONE_LINK:  [MessageHandler(filters.TEXT & ~filters.COMMAND, done_link)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    # –ó–∞–ø–ª–∞–Ω—É—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–∞–Ω–∫–æ–≤–∏–π —Ä—ñ–º–∞–π–Ω–¥–µ—Ä –æ 06:00 UTC (‚âà09:00 –ö–∏—ó–≤)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_reminders,
        trigger="cron",
        hour=6,
        minute=0,
        args=[app.bot]
    )
    scheduler.start()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
