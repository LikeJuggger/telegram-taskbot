import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# –ï—Ç–∞–ø–∏ –∑–±–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
NAME, DESCRIPTION, LINKS, ASSIGNEE, DEADLINE = range(5)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /newtask —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É.")

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìù –û–ø–∏—à–∏ —Å—É—Ç—å –∑–∞–¥–∞—á—ñ:")
    return DESCRIPTION

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['description'] = update.message.text
    await update.message.reply_text("üìé –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ–º–∞—î¬ª")
    return LINKS

async def get_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['links'] = update.message.text
    await update.message.reply_text("üë§ –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å? –í–∫–∞–∂–∏ @username:")
    return ASSIGNEE

async def get_assignee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['assignee'] = update.message.text
    await update.message.reply_text("‚è∞ –Ø–∫–∏–π –¥–µ–¥–ª–∞–π–Ω?")
    return DEADLINE

async def get_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['deadline'] = update.message.text
    data = context.user_data

    summary = (
        f"‚úÖ *–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞!*\n\n"
        f"*–ù–∞–∑–≤–∞:* {data['name']}\n"
        f"*–û–ø–∏—Å:* {data['description']}\n"
        f"*–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏:* {data['links']}\n"
        f"*–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:* {data['assignee']}\n"
        f"*–î–µ–¥–ª–∞–π–Ω:* {data['deadline']}"
    )

    await update.message.reply_markdown(summary)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –ó–∞–¥–∞—á—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ‚úÖ –ö–æ–¥ —Å—Ç–∞—Ä—Ç—É—î –∑–∞–≤–∂–¥–∏ (–±–µ–∑ if __name__ == '__main__')
TOKEN = os.getenv("BOT_TOKEN")
app = ApplicationBuilder().token(TOKEN).build()

# –•–µ–Ω–¥–ª–µ—Ä–∏
conv = ConversationHandler(
    entry_points=[CommandHandler("newtask", new_task)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
        LINKS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_links)],
        ASSIGNEE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_assignee)],
        DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_deadline)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv)

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
app.run_polling()
